Starting audit...
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:36:45: Using the '.*' form of import should be avoided - main.UtilityClasses.DoCommands.*. [AvoidStarImport]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:91:5: Method length is 654 lines (max allowed is 150). [MethodLength]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:451:39: '31' is a magic number. [MagicNumber]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:451:53: '12' is a magic number. [MagicNumber]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:452:39: '1990' is a magic number. [MagicNumber]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:452:54: '2023' is a magic number. [MagicNumber]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:457:57: '28' is a magic number. [MagicNumber]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:604: Line has trailing spaces. [RegexpSingleline]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:626: Line is longer than 100 characters (found 115). [LineLength]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:626:52: 'typecast' is not followed by whitespace. [WhitespaceAfter]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:632: Line is longer than 100 characters (found 120). [LineLength]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:632:55: 'typecast' is not followed by whitespace. [WhitespaceAfter]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:638: Line is longer than 100 characters (found 122). [LineLength]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:638:56: 'typecast' is not followed by whitespace. [WhitespaceAfter]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:644: Line is longer than 100 characters (found 116). [LineLength]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\Main.java:644:53: 'typecast' is not followed by whitespace. [WhitespaceAfter]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PagingClasses\PageSystem.java:3:8: Unused import - main.PlaylistClasses.UserPlaylists. [UnusedImports]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PagingClasses\PageSystem.java:12:25: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PagingClasses\PageSystem.java:15:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Album.java:3:8: Unused import - fileio.input.SongInput. [UnusedImports]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Album.java:5:8: Unused import - java.util.ArrayList. [UnusedImports]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:15:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'compareTo' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'compareTo' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:28:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:32:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:36:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'getSongs' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'getSongs' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:40:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'setSongs' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'setSongs' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:44:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'isVisibility' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'isVisibility' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:48:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'setVisibility' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'setVisibility' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:52:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'getFollowers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'getFollowers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:56:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'setFollowers' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'setFollowers' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:60:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'getOwner' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'getOwner' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:64:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'setOwner' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'setOwner' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:68:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'getOriginalSongOrder' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'getOriginalSongOrder' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\PlaylistClasses\Playlist.java:72:5: Class 'Playlist' looks like designed for extension (can be subclassed), but the method 'setOriginalSongOrder' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Playlist' final or making the method 'setOriginalSongOrder' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\SelectionClasses\ArtistSelection.java:15:27: Parameter artist should be final. [FinalParameters]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\SelectionClasses\Playlists\AlbumSelection.java:29:35: Parameter startTimestamp should be final. [FinalParameters]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\SelectionClasses\Playlists\AlbumSelection.java:37:34: Parameter stopTimestamp should be final. [FinalParameters]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\DoCommands.java:18:29: Using the '.*' form of import should be avoided - main.SelectionClasses.*. [AvoidStarImport]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\DoCommands.java:48:5: Method length is 205 lines (max allowed is 150). [MethodLength]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\DoCommands.java:1655:5: Method length is 153 lines (max allowed is 150). [MethodLength]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\DoCommands.java:1655:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\DoCommands.java:1693:46: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\DoCommands.java:1706:37: '5' is a magic number. [MagicNumber]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\DoCommands.java:1721:37: '5' is a magic number. [MagicNumber]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\GetMessages.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\GetMessages.java:167:61: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\SearchSelect.java:11:29: Using the '.*' form of import should be avoided - main.SelectionClasses.*. [AvoidStarImport]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\UtilityClasses\SearchSelect.java:296:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\Visitable.java:4:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\Visitor.java:9:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\Visitor.java:10:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\Visitor.java:11:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\Visitor.java:12:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitDeleteUser.java:18:5: Class 'VisitDeleteUser' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'VisitDeleteUser' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitDeleteUser.java:19:25: Parameter songSelection should be final. [FinalParameters]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitDeleteUser.java:23:5: Class 'VisitDeleteUser' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'VisitDeleteUser' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitDeleteUser.java:24:25: Parameter podcastSelection should be final. [FinalParameters]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitDeleteUser.java:28:5: Class 'VisitDeleteUser' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'VisitDeleteUser' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitDeleteUser.java:29:25: Parameter playlistSelection should be final. [FinalParameters]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitDeleteUser.java:33:5: Class 'VisitDeleteUser' looks like designed for extension (can be subclassed), but the method 'visit' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'VisitDeleteUser' final or making the method 'visit' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitDeleteUser.java:34:25: Parameter albumSelection should be final. [FinalParameters]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitNextMessage.java:6:29: Using the '.*' form of import should be avoided - main.SelectionClasses.*. [AvoidStarImport]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitNextMessage.java:172:25: Parameter crtItem should be final. [FinalParameters]
[ERROR] D:\JetBrains\etapa-2-POO\.\src\main\VisitorPattern\VisitorClasses\VisitPrevMessage.java:20:25: Parameter crtItem should be final. [FinalParameters]
Audit done.
Checkstyle ends with 64 errors.
